;( function($, _, undefined){
    "use strict";
    ips.createModule('{module}', () => {
        /**
         * Respond to a dialog trigger
         *
         * @param   {element}   elem        The element this widget is being created on
         * @param   {object}    options     The options passed
         * @param   {event}     e           if lazyload, event that is fire
         * @returns {void}
         */
         const respond = (elem, options, e) => {
            let el = $(elem);
            if (!el.data('_loaded{fn}')) {
                let mobject = _object{fn}(el, options);
                mobject.init();
                el.data('_loaded{fn}', mobject);
            }
        },
        /**
         * Retrieve the instance (if any) on the given element
         *
         * @param	{element} 	elem 		The element to check
         * @returns {mixed} 	The instance or undefined
         */
        getObj = (elem) => {
            if( $( elem ).data('_loaded{fn}') ){
                return $( elem ).data('_loaded{fn}');
            }
            return undefined;
        };

        // Register this module as a widget to enable the data API and
        // jQuery plugin functionality
        ips.ui.registerWidget(
            '{widgetname}',
            {module},
            {options}
        );

        // Expose public methods
        return {
            respond: respond,
            getObj: getObj
        };
    });
    const _object{fn} = function(elem, options) {
        let init = () => {
        };
        return {
            init: init
        }
    };
}(jQuery, _));
