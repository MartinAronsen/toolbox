<?php
/**
 * @brief		File Storage Extension: {class}
 * @author		<a href='https://www.invisioncommunity.com'>Invision Power Services, Inc.</a>
 * @copyright	(c) Invision Power Services, Inc.
 * @license		https://www.invisioncommunity.com/legal/standards/
 * @package		Invision Community
{subpackage}
 * @since		{date}
 */

namespace IPS\{app}\extensions\core\FileStorage;

use IPS\Db;
use IPS\File;
use UnderflowException;
use RuntimeException;
use Exception;
use OutOfRangeException;

use function defined;
use function header;

/* To prevent PHP errors (extending class does not exist) revealing path */
if ( !defined( '\IPS\SUITE_UNIQUE_KEY' ) )
{
    header( ($_SERVER['SERVER_PROTOCOL'] ?? 'HTTP/1.0') . ' 403 Forbidden' );
    exit;
}

/**
 * File Storage Extension: {class}
 */
class _{class}
{
    /**
     * Count stored files
     *
     * @return	int
     */
    public function count()
    {
        try{
            return Db::i()->select( 'COUNT(*)', '{table}', '{field} IS NOT NULL' )->first();
        }catch(UnderflowException $e){
            return 0;
        }
    }

    /**
     * Move stored files
     *
     * @param	int			$offset					This will be sent starting with 0, increasing to get all files stored by this extension
     * @param	int			$storageConfiguration	New storage configuration ID
     * @param	int|NULL	$oldConfiguration		Old storage configuration ID
     * @throws	UnderflowException					When file record doesn't exist. Indicating there are no more files to move
     * @return	void|int							An offset integer to use on the next cycle, or nothing
     */
    public function move( $offset, $storageConfiguration, $oldConfiguration=NULL )
    {
	    $sql = Db::i()->select('*', '{table}', '{field} IS NOT NULL', 'id', [$offset, 1])->first();

	    try {
            $img = File::get($oldConfiguration ?: '{app}_{class}', $sql['{field}'])->move($storageConfiguration);
            Db::i()->update( '{table}', array( '{field}', $img ), ['id=?', $sql['id'] ] );
        } catch( RuntimeException | Exception $e ){}
	}

    /**
     * Check if a file is valid
     *
     * @param	string	$file		The file path to check
     * @return	bool
     */
    public function isValidFile( $file )
    {
        try{
            Db::i()->select('*', '{table}', array('{field} = ?', (string) $file) )->first();
            return true;
        }
        catch( UnderflowException $e ){
            return false;
        }
    }

    /**
     * Delete all stored files
     *
     * @return	void
     */
    public function delete()
    {
        foreach( Db::i()->select( '*', '{table}', '{field} IS NOT NULL' ) as $img )
        {
            try
            {
                File::get( '{app}_{class}', $img['{field}'] )->delete();
            }
            catch( OutOfRangeException $e ){}
        }
    }
}
